from aiogram import Bot, Dispatcher, executor, types
import asyncio as messagedelete
import sqlite3
import logging
from balance_anti_cheat import check_and_update_rank
from send_money import send_coins_to_user, gopstop_coins_to_user

from check_access import *
from config import *
from keywords_data import *

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)

dp = Dispatcher(bot)

RANKS = {
    '–ù–æ–≤–∏—á–æ–∫': (0, 1),
    '–ë–∏–∫–∏–Ω–∏': (1, 10),
    '–©–µ–≥–æ–ª': (10, 20),
    '–°–º—ã—á–µ–∫': (20, 30),
    '–¢—É—Ä–∏—Å—Ç': (30, 50),
    '–õ—é–±–∏—Ç–µ–ª—å —Ñ–∞—Ä–º—ã': (50, 100),
    '–ë–∏–ª–¥–µ—Ä': (100, 200),
    '–ú–∞—à–∏–Ω–∞': (200, 250),
    '–ñ–∏–≤–æ—Ç–Ω–æ–µ': (250, 300),
    '–¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä': (300, 350),
    'mr.–û–ª–∏–º–ø–∏—è': (350, 400),
    '–•–∏—â–Ω–∏–∫': (400, 450),
    '–ö—Ç–æ —Ç—ã —Ç–≤–∞—Ä—å ?': (450, 500),
    '–≠–∫—Å–ø–µ—Ä—Ç': (500, float('inf'))
}


def get_rank(reputation):
    for rank, (min_rep, max_rep) in RANKS.items():
        if min_rep <= reputation < max_rep:
            return rank
    return '–î–Ω–∏—â–µ –ë–ª—è'


def create_database():
    conn = sqlite3.connect(REPA_BD)
    cursor = conn.cursor()
    cursor.execute(
        '''CREATE TABLE IF NOT EXISTS reputation (
                "user_id"    INTEGER,
                "reputation" INTEGER,
                "user_name"  TEXT,
                "ranks"      TEXT,
                "money"      INTEGER NOT NULL DEFAULT 0,
                PRIMARY KEY("user_id")
        )''')
    conn.commit()
    conn.close()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
@dp.message_handler(
    lambda message: any(keyword in message.text.lower() for keyword in ['—Ä–µ–π—Ç–∏–Ω–≥', '—Ä–µ–ø–∞', '—Ä–µ–ø—É—Ç–∞—Ü–∏—è']))
async def get_reputation(message: types.Message):
    words = message.text.split()
    if len(words) == 1:
        conn = sqlite3.connect(REPA_BD)
        cursor = conn.cursor()

        user_id = message.from_user.id
        user_name = message.from_user.full_name
        cursor.execute('SELECT reputation FROM reputation WHERE user_id=?', (user_id,))
        row = cursor.fetchone()
        if row is None:
            cursor.execute('INSERT INTO reputation (user_id, reputation, user_name) VALUES (?, ?, ?)',
                           (user_id, 0, user_name))
            conn.commit()
            sent_message = await message.reply(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!'
                                               f'\n–í–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è: 0 '
                                               f'\n–í–∞—à–µ –∑–≤–∞–Ω–∏–µ: –ù–æ–≤–∏—á–æ–∫'
                                               f'\n–ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∑–≤–∞–Ω–∏—è –≤–∞–º –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã KRAFT coins . –£–¥–∞—á–∏!')
            await messagedelete.sleep(10)
            try:
                await sent_message.delete()
            except Exception as e:
                print(e)
        else:
            reputation = row[0]
            rank = get_rank(reputation)
            reply_text = f'–í–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è:'f' {reputation} \n–í–∞—à–µ –∑–≤–∞–Ω–∏–µ: {rank}.'
            sent_message = await message.reply(reply_text)
            await messagedelete.sleep(10)
            try:
                await sent_message.delete()
            except Exception as e:
                print(e)
        conn.close()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
@dp.message_handler(
    lambda message: any(
        keyword in message.text.lower() for keyword in ['—Å–ø–∞—Å–∏–±–æ', '–∫—Ä—É—Ç–æ', '—Å–ø—Å', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '+', 'üëç']))
async def increase_reputation(message: types.Message):
    conn = sqlite3.connect(REPA_BD)
    cursor = conn.cursor()
    words = message.text.split()
    if len(words) == 1:
        if message.reply_to_message is None:
            sent_message = await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            await messagedelete.sleep(10)
            try:
                await sent_message.delete()
            except Exception as e:
                print(e)
            return

        sender_id = message.from_user.id
        recipient_id = message.reply_to_message.from_user.id

        if sender_id == recipient_id:
            sent_message = await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é.")
            await messagedelete.sleep(10)
            try:
                await sent_message.delete()
            except Exception as e:
                print(e)
            return

        change_value = 1
        cursor.execute('SELECT reputation FROM reputation WHERE user_id=?', (recipient_id,))
        row = cursor.fetchone()
        user_name = message.reply_to_message.from_user.full_name
        user_id = message.reply_to_message.from_user.id
        if row is None:
            reply_text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø—É—Ç–∞—Ü–∏–∏'
            sent_message = await message.reply(reply_text)

            await messagedelete.sleep(10)
            try:
                await sent_message.delete()
            except Exception as e:
                print(e)
            return
        else:
            reputation = row[0] + change_value
            cursor.execute('UPDATE reputation SET reputation=? WHERE user_id=?', (reputation, recipient_id))
            conn.commit()

            points_for_rank = 500

            rank = get_rank(reputation)
            if await check_and_update_rank(user_id, rank, points_for_rank, message):
                print(f"–ë–∞–ª–ª—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∑–∞ –∑–≤–∞–Ω–∏–µ: {rank}")
            else:
                print(f"–ë–∞–ª–ª—ã —É–∂–µ –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∑–∞ —ç—Ç–æ –∑–≤–∞–Ω–∏–µ: {rank}")

            conn.commit()
            conn.close()
            rank = get_rank(reputation)
            reply_text = (
                f'–†–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.reply_to_message.from_user.first_name} —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {abs(change_value)}.'
                f'\n–¢–µ–∫—É—â–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {reputation} \n–í–∞—à–µ –∑–≤–∞–Ω–∏–µ: {rank}.')
            sent_message = await message.reply(reply_text)
            await messagedelete.sleep(10)
            try:
                await sent_message.delete()
            except Exception as e:
                print(e)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
@dp.message_handler(lambda message: any(keyword in message.text.lower() for keyword in ['üëé']))
async def decrease_reputation(message: types.Message):
    conn = sqlite3.connect(REPA_BD)
    cursor = conn.cursor()
    words = message.text.split()
    if len(words) == 1:
        if message.reply_to_message is None:
            sent_message = await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            await messagedelete.sleep(10)
            try:
                await sent_message.delete()
            except Exception as e:
                print(e)
            return

        if message.reply_to_message.from_user.id == message.from_user.id:
            sent_message = await message.reply("–ù–µ–ª—å–∑—è —É–º–µ–Ω—å—à–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é.")
            await messagedelete.sleep(10)
            try:
                await sent_message.delete()
            except Exception as e:
                print(e)
            return

        user_id = message.reply_to_message.from_user.id
        change_value = -1
        cursor.execute('SELECT reputation FROM reputation WHERE user_id=?', (user_id,))
        row = cursor.fetchone()

        user_name = message.reply_to_message.from_user.full_name
        if row is None:
            reply_text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø—É—Ç–∞—Ü–∏–∏'
            sent_message = await message.reply(reply_text)
            conn.close()
            await messagedelete.sleep(10)
            try:
                await sent_message.delete()
            except Exception as e:
                print(e)
            return
        else:
            reputation = row[0] + change_value
            cursor.execute('UPDATE reputation SET reputation=? WHERE user_id=?', (reputation, user_id))
            conn.commit()
            conn.close()
            rank = get_rank(reputation)
            reply_text = f'–†–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.reply_to_message.from_user.full_name}\n—É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ {abs(change_value)}.\n–¢–µ–∫—É—â–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {reputation} \n–í–∞—à–µ –∑–≤–∞–Ω–∏–µ: {rank}.'
            sent_message = await message.reply(reply_text)
            await messagedelete.sleep(10)
            try:
                await sent_message.delete()
            except Exception as e:
                print(e)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
@dp.message_handler(commands=['rating'])
async def get_rating(message: types.Message):
    conn = sqlite3.connect(REPA_BD)
    cursor = conn.cursor()
    try:
        top_count = int(message.text.split()[1])
    except (IndexError, ValueError):
        top_count = 100
    cursor.execute('SELECT user_id, reputation, user_name FROM reputation ORDER BY reputation DESC LIMIT ?',
                   (top_count,))
    rows = cursor.fetchall()
    conn.close()
    if not rows:
        sent_message = await message.reply('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        await messagedelete.sleep(10)
        try:
            await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)
        except Exception as e:
            print(e)
        return
    rating_text = f'–¢–æ–ø-{top_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n'
    for i, row in enumerate(rows):
        user_id, reputation, user_name = row
        rank = get_rank(reputation)
        rating_text += f'{i + 1}. {user_name} –†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation} –ó–≤–∞–Ω–∏–µ: {rank}\n'
    sent_message = await message.reply(rating_text)
    await messagedelete.sleep(10)
    try:
        await sent_message.delete()
    except Exception as e:
        print(e)
    await message.delete()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç
@dp.message_handler(commands=['speak_chat'])
@auth
@check_type_chat()
async def send_to_chat(message: types.Message):
    text = message.text.replace("/speak_chat ", "")
    await bot.send_message(chat_id=-1001205041376, text=text)


@dp.message_handler(commands=['send'])
async def send_to_money(message: types.Message):
    await send_coins_to_user(message)


@dp.message_handler(commands=['gopstop'])
@auth
async def gopstop_to_money(message: types.Message):
    await gopstop_coins_to_user(message)


@dp.message_handler(commands=['rank_system'])
@auth
async def Rank_System_handler(message: types.Message):
    await message.delete()
    await message.answer(Rank_System, parse_mode='markdown')


if __name__ == '__main__':
    create_database()
    executor.start_polling(dp, skip_updates=True)
